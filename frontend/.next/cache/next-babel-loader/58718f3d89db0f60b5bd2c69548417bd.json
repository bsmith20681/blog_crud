{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport cookie from 'js-cookie';\nexport const signup = user => {\n  return fetch(`${API}/signup`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application.json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const signin = user => {\n  return fetch(`${API}/signin`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application.json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const setCookie = (key, value) => {\n  if (false) {\n    cookie.set(key, value, {\n      expires: 1\n    });\n  }\n};\nexport const removeCookie = key => {\n  if (false) {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n};\nexport const getCookie = key => {\n  if (false) {\n    cookie.get(key);\n  }\n};\nexport const setLocalStore = (key, value) => {\n  if (false) {\n    localstorage.setItem(key, JSON.stringify(value));\n  }\n};\nexport const removeLocalStore = key => {\n  if (false) {\n    localstorage.removeItem(key);\n  }\n};\nexport const authenticate = (data, next) => {\n  setCookie('token', data.token);\n  setLocalStorage('user', data.user);\n  next();\n};\nexport const isAuth = () => {\n  if (false) {\n    const cookieChecked = getCookie('token');\n\n    if (cookieChecked) {\n      if (localstorage.getItem('user')) {\n        return JSON.parse(localstore.getItem('user'));\n      } else {\n        return false;\n      }\n    }\n  }\n};","map":{"version":3,"sources":["D:/blog_crud/frontend/actions/auth.js"],"names":["fetch","API","cookie","signup","user","method","headers","Accept","body","JSON","stringify","then","response","json","catch","err","console","log","signin","setCookie","key","value","set","expires","removeCookie","remove","getCookie","get","setLocalStore","localstorage","setItem","removeLocalStore","removeItem","authenticate","data","next","token","setLocalStorage","isAuth","cookieChecked","getItem","parse","localstore"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAAQC,GAAR,QAAkB,WAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,OAAO,MAAMC,MAAM,GAAIC,IAAD,IAAU;AAC9B,SAAOJ,KAAK,CAAE,GAAEC,GAAI,SAAR,EAAkB;AAC5BI,IAAAA,MAAM,EAAE,MADoB;AAE5BC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAFmB;AAM5BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANsB,GAAlB,CAAL,CAQNO,IARM,CAQDC,QAAQ,IAAI;AAChB,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,GAVM,EAWNC,KAXM,CAWAC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXP,CAAP;AAYD,CAbM;AAeP,OAAO,MAAMG,MAAM,GAAId,IAAD,IAAU;AAC9B,SAAOJ,KAAK,CAAE,GAAEC,GAAI,SAAR,EAAkB;AAC5BI,IAAAA,MAAM,EAAE,MADoB;AAE5BC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KAFmB;AAM5BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANsB,GAAlB,CAAL,CAQNO,IARM,CAQDC,QAAQ,IAAI;AAChB,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,GAVM,EAWNC,KAXM,CAWAC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXP,CAAP;AAYD,CAbM;AAeP,OAAO,MAAMI,SAAS,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACvC,aAAmB;AACjBnB,IAAAA,MAAM,CAACoB,GAAP,CAAWF,GAAX,EAAgBC,KAAhB,EAAuB;AACrBE,MAAAA,OAAO,EAAC;AADa,KAAvB;AAGD;AACF,CANM;AAQP,OAAO,MAAMC,YAAY,GAAIJ,GAAD,IAAS;AACnC,aAAmB;AACjBlB,IAAAA,MAAM,CAACuB,MAAP,CAAcL,GAAd,EAAmB;AACjBG,MAAAA,OAAO,EAAC;AADS,KAAnB;AAGD;AACF,CANM;AAQP,OAAO,MAAMG,SAAS,GAAIN,GAAD,IAAS;AAChC,aAAmB;AACjBlB,IAAAA,MAAM,CAACyB,GAAP,CAAWP,GAAX;AACD;AACF,CAJM;AAMP,OAAO,MAAMQ,aAAa,GAAG,CAACR,GAAD,EAAMC,KAAN,KAAgB;AAC3C,aAAoB;AAClBQ,IAAAA,YAAY,CAACC,OAAb,CAAqBV,GAArB,EAA0BX,IAAI,CAACC,SAAL,CAAeW,KAAf,CAA1B;AACD;AACF,CAJM;AAMP,OAAO,MAAMU,gBAAgB,GAAIX,GAAD,IAAS;AACvC,aAAoB;AAClBS,IAAAA,YAAY,CAACG,UAAb,CAAwBZ,GAAxB;AACD;AACF,CAJM;AAMP,OAAO,MAAMa,YAAY,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC1ChB,EAAAA,SAAS,CAAC,OAAD,EAAUe,IAAI,CAACE,KAAf,CAAT;AACAC,EAAAA,eAAe,CAAC,MAAD,EAASH,IAAI,CAAC9B,IAAd,CAAf;AACA+B,EAAAA,IAAI;AACL,CAJM;AAMP,OAAO,MAAMG,MAAM,GAAG,MAAM;AAC1B,aAAoB;AAClB,UAAMC,aAAa,GAAGb,SAAS,CAAC,OAAD,CAA/B;;AACA,QAAGa,aAAH,EAAkB;AAChB,UAAGV,YAAY,CAACW,OAAb,CAAqB,MAArB,CAAH,EAAgC;AAC9B,eAAO/B,IAAI,CAACgC,KAAL,CAAWC,UAAU,CAACF,OAAX,CAAmB,MAAnB,CAAX,CAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;AACF;AACF,CAXM","sourcesContent":["import fetch from 'isomorphic-fetch'\r\nimport {API} from '../config'\r\nimport cookie from 'js-cookie'\r\n\r\nexport const signup = (user) => {\r\n  return fetch(`${API}/signup`, {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application.json',\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(user)\r\n  })\r\n  .then(response => {\r\n    return response.json()\r\n  })\r\n  .catch(err => console.log(err))\r\n}\r\n\r\nexport const signin = (user) => {\r\n  return fetch(`${API}/signin`, {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application.json',\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(user)\r\n  })\r\n  .then(response => {\r\n    return response.json()\r\n  })\r\n  .catch(err => console.log(err))\r\n}\r\n\r\nexport const setCookie = (key, value) => {\r\n  if(process.browser){\r\n    cookie.set(key, value, {\r\n      expires:1\r\n    });\r\n  }\r\n}\r\n\r\nexport const removeCookie = (key) => {\r\n  if(process.browser){\r\n    cookie.remove(key, {\r\n      expires:1\r\n    });\r\n  }\r\n}\r\n\r\nexport const getCookie = (key) => {\r\n  if(process.browser){\r\n    cookie.get(key);\r\n  }\r\n}\r\n\r\nexport const setLocalStore = (key, value) => {\r\n  if(process.browser) {\r\n    localstorage.setItem(key, JSON.stringify(value))\r\n  }\r\n}\r\n\r\nexport const removeLocalStore = (key) => {\r\n  if(process.browser) {\r\n    localstorage.removeItem(key)\r\n  }\r\n}\r\n\r\nexport const authenticate = (data, next) => {\r\n  setCookie('token', data.token)\r\n  setLocalStorage('user', data.user)\r\n  next();\r\n}\r\n\r\nexport const isAuth = () => {\r\n  if(process.browser) {\r\n    const cookieChecked = getCookie('token')\r\n    if(cookieChecked) {\r\n      if(localstorage.getItem('user')){\r\n        return JSON.parse(localstore.getItem('user'))\r\n      } else {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}